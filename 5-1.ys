# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main       # Execute main program
    halt            # Terminate program 

# Array of 10 elements
    .align 8
array:  
    .quad 0x00000000000a #big indian
    .quad 0x000000000009 #on stack it is little indian
    .quad 0x000000000008
    .quad 0x000000000007
    .quad 0x000000000006
    .quad 0x000000000005
    .quad 0x000000000004
    .quad 0x000000000003
    .quad 0x000000000002
    .quad 0x000000000001
    
# move commands
    #i : immediate value
    #r: register
    #m: memory
    #format: XXmovq where X's are i, r or m

main:   
    irmovq array, %rdi  #array in rdi
    irmovq $10, %rsi   # array length in rsi
    call sort  # sort(array, 10)
    ret

sort:
    
    #set up registers pointing to array locations
    inital:
    rrmovq %rsi, %r12 # tmp array length
    irmovq $1, %rbx   #sorted bool check
    rrmovq %rdi, %r8  #r8 = a[0]
    rrmovq %rdi, %r9
    iaddq $8, %r9     #r9 = a[1]
    
    loop:
    isubq $1, %r12    # decrement array length
    je done           # if 0, go to done
    mrmovq (%r8), %r14  # r14 = a[0]
    mrmovq (%r9), %r13  # r13 = a[1]
    subq %r13, %r14    # r14 = r14 - r9
    jg dosort         # if that value is greater than zero, jump to do sort
    jl issorted       # if less than zero, jump to issorted
    
    issorted:
    jmp loop
    
    dosort:
    call swap
    iaddq $8, %r8
    iaddq $8, %r9
    irmovq $0, %rbx
    jmp loop
    
    done:
    iaddq $0, %rbx
    je initial
    ret
    
    #pay attention to which registers have values or pointers in them
swap:
    mrmovq (%r8), %rax  #go to location pointed at by r8
                        #move that value into rax
    mrmovq (%r9), %rcx  #same but for r9
    rmmovq %rcx, (%r8)  #move contents of rcx into address pointed at by r8
    rmmovq %rax, (%r9)
    ret

    .pos 0x200
stack:

    
